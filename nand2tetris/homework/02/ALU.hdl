// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    And16(a=x, b=false, out=zerox);
    And16(a=y, b=false, out=zeroy);
    Or16(a=x, b=true, out=onex);
    Or16(a=y, b=true, out=oney);
    Not16(in=x, out=notx);
    Not16(in=y, out=noty);
    Mux4Way16(a=x, b=zerox, c=notx, d=onex, sel[0]=zx, sel[1]=nx, out=xtransform);
    Mux4Way16(a=y, b=zeroy, c=noty, d=oney, sel[0]=zy, sel[1]=ny, out=ytransform);
    
    //x+y; x&y
    Add16(a=xtransform, b=ytransform, out=xplusy);
    And16(a=xtransform, b=ytransform, out=xandy);
    Mux16(a=xandy, b=xplusy, sel=f, out=fxy);
    
    //not-output
    Not16(in=fxy, out=notfxy);
    
    //final main output
    Mux16(
        a=fxy,
        b=notfxy,
        sel=no,
        out=out,
        out=auxout,
        out[0]=out0,
        out[1]=out1,
        out[2]=out2,
        out[3]=out3,
        out[4]=out4,
        out[5]=out5,
        out[6]=out6,
        out[7]=out7,
        out[8]=out8,
        out[9]=out9,
        out[10]=out10,
        out[11]=out11,
        out[12]=out12,
        out[13]=out13,
        out[14]=out14,
        out[15]=out15);
    
    //zr
    Or(a=out0, b=out1, out=zr0);
    Or(a=out2, b=zr0, out=zr1);
    Or(a=out3, b=zr1, out=zr2);
    Or(a=out4, b=zr2, out=zr3);
    Or(a=out5, b=zr3, out=zr4);
    Or(a=out6, b=zr4, out=zr5);
    Or(a=out7, b=zr5, out=zr6);
    Or(a=out8, b=zr6, out=zr7);
    Or(a=out9, b=zr7, out=zr8);
    Or(a=out10, b=zr8, out=zr9);
    Or(a=out11, b=zr9, out=zr10);
    Or(a=out12, b=zr10, out=zr11);
    Or(a=out13, b=zr11, out=zr12);
    Or(a=out14, b=zr12, out=zr13);
    Or(a=out15, b=zr13, out=zr14);
    Not(in=zr14, out=zr);

    //ng
    And16(a=auxout, b=auxout, out[15]=onebitauxout);
    Or(a=onebitauxout, b=false, out=ng);

}