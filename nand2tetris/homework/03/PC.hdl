// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    //Calculating incremented value from current output
    Inc16(in=auxout, out=incremented);
    
    //Choosing between reset and increment. Reset is a priority in case inc ==1 and reset==1
    Mux16(a=in, b[0..15]=false, sel=reset, out=resetORin);
    
    //If inc or reset == 1 then we'll need to write the value to the register
    Or(a=load, b=reset, out=loadORreset);
    
    //Choosing between in value and inc/reset values. inc reset are priority over in-value.
    Mux16(a=incremented, b=resetORin, sel=loadORreset, out=resetORloadORinc);

    // If any of inc/reset/in value is not zero we'll update output of the register
    Or(a=loadORreset, b=inc, out=finalload);
    
    //compiling the logig into the register chip
    Register(in=resetORloadORinc, load=finalload, out=out, out=auxout);    
}
